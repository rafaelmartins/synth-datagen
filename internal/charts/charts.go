package charts

import (
	"errors"
	"fmt"
	"io"
	"reflect"

	"github.com/go-echarts/go-echarts/v2/charts"
	"github.com/go-echarts/go-echarts/v2/components"
	"github.com/go-echarts/go-echarts/v2/opts"
	"github.com/go-echarts/go-echarts/v2/templates"
	"github.com/rafaelmartins/synth-datagen/internal/ctypes"
)

func init() {
	templates.PageTpl = `
{{- define "page" }}
<!DOCTYPE html>
<html>
    {{- template "header" . }}
<body>
	<h1 style="font-family: monospace; text-align: center;">{{ .PageTitle }}</h1>
{{ if eq .Layout "none" }}
    {{- range .Charts }} {{ template "base" . }} {{- end }}
{{ end }}
{{ if eq .Layout "center" }}
    <style> .container {display: flex;justify-content: center;align-items: center;} .item {margin: auto;} </style>
    {{- range .Charts }} {{ template "base" . }} {{- end }}
{{ end }}
{{ if eq .Layout "flex" }}
    <style> .box { justify-content:center; display:flex; flex-wrap:wrap } </style>
    <div class="box"> {{- range .Charts }} {{ template "base" . }} {{- end }} </div>
{{ end }}
	<hr />
	<p style="font-family: monospace; font-size: 1.2em; text-align: center;">
		Generated by <a href="https://github.com/rafaelmartins/synth-datagen">synth-datagen</a>
		using <a href="https://github.com/go-echarts/go-echarts">go-echarts</a>.
	</p>
</body>
</html>
{{ end }}
`
}

type Charts struct {
	page *components.Page
}

func New(title string) *Charts {
	page := components.NewPage().SetLayout(components.PageFlexLayout)
	page.PageTitle = title
	return &Charts{
		page: page,
	}
}

func (c *Charts) render(title string, data interface{}) {
	if c.page == nil {
		return
	}

	val := reflect.ValueOf(data)
	if val.Type().Kind() != reflect.Slice {
		return
	}

	line := charts.NewLine()
	line.SetGlobalOptions(
		charts.WithTitleOpts(opts.Title{
			Title: title,
			TitleStyle: &opts.TextStyle{
				FontStyle:  "normal",
				FontFamily: "monospace",
			},
			Left: "center",
			Top:  "30",
		}),
	)

	x := []int{}
	y := []opts.LineData{}
	for i := 0; i < val.Len(); i++ {
		x = append(x, i)
		y = append(y, opts.LineData{Value: val.Index(i).Interface()})
	}

	c.page.AddCharts(line.SetXAxis(x).AddSeries("value", y))
}

func (c *Charts) AddData(identifier string, value interface{}, attributes []string, strWidth *int) {
	if value == nil {
		return
	}

	val := reflect.ValueOf(value)
	if val.Kind() != reflect.Slice {
		return
	}

	if ctypes.TypeIsNumeric(val.Type().Elem()) {
		c.render(identifier, value)
		return
	}

	for i := 0; i < val.Len(); i++ {
		c.AddData(fmt.Sprintf("%s[%d]", identifier, i), val.Index(i).Interface(), attributes, strWidth)
	}
}

func (c *Charts) Write(w io.Writer) error {
	if c.page == nil {
		return errors.New("charts: not defined")
	}
	return c.page.Render(w)
}

func (c *Charts) AddInclude(path string, system bool) {}

func (c *Charts) AddMacro(identifier string, value interface{}, hex bool, raw bool) {}
